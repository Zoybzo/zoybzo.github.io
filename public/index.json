[{"content":"Paper Overview HunyuanVideo 是一款开源的视频生成基座模型，打破了目前的开源模型远远弱于闭源模型的情形。 Hunyuan 在论文中提出了多种模型，包括文生视频、视频生音频、图生视频，以及姿态控制、音频控制、表情控制等多种下游微调任务。 完整的 pipeline 如下所示： 在 Pipeline 中主要包含三个部分：数据处理、基座模型训练以及下游任务。 Detail T2V 模型 3D VAE 与以往的视频生成模型不同，Hunyuan 选择自己从头训练一个 3D VAE 模型。从实验上来看，Hunyuan 的 3D VAE 有更高的 PSNR，也就是有更好的重构效果。 模型的 PSNR 实验效果如下： 3DVAE 的模型结构如下： 训练 训练数据采用 视频：图片=4:1 比例。 使用多种损失共同构成损失函数：L1损失+KL损失+LPIPS损失+GAN损失。全都是和图片重构相关的损失函数。 训练策略上，采取了渐进式训练策略，从低分辨率短视频逐渐过渡到高分辨率长视频。 为了提升模型对于高速视频的重建能力，会从 [1,8] 中随机采样一个数字作为采样间隔，使用该采样间隔从视频帧中进行均匀采样，采样结果用于训练。 这样的帧率应该就不一样了呀？ #🤔 通过 Mask 来实现输入帧率不变但实际帧率变化？ 推理 高分辨率长视频的推理往往难以在单张GPU上完成，为了解决这个问题，论文提出了时空瓦片策略（spatial-temporal tiling strategy）（很形象的名字，视频首尾相连，类似于房顶的瓦片），将视频拆成有部分重叠的片段，对每个片段单独编解码，并使用线性组合处理重叠部分。 直接在推理中使用瓦片策略会导致训练和推理中出现不一致的情况（重叠部分的处理导致的），为了解决这个问题，论文在训练之后引入了一个微调阶段，在微调阶段中随机决定是否采用瓦片策略，保证训练和推理的一致性。 按照 T 维度（temporal）进行操作的代码如下： def temporal_tiled_encode(self, x: torch.FloatTensor, return_dict: bool = True) -\u0026gt; AutoencoderKLOutput: B, C, T, H, W = x.shape # 减去重叠部分后的长度，用作步长 overlap_size = int( self.tile_sample_min_tsize * (1 - self.tile_overlap_factor)) # 前后帧的重叠长度 blend_extent = int( self.tile_latent_min_tsize * self.tile_overlap_factor) # 最大长度 t_limit = self.tile_latent_min_tsize - blend_extent # Split the video into tiles and encode them separately. row = [] for i in range(0, T, overlap_size): # 每一个瓦片的长度为 tile_sample_min_tsize tile = x[:, :, i: i + self.tile_sample_min_tsize + 1, :, :] # 处理空间维度 if self.use_spatial_tiling \\ and (tile.shape[-1] \u0026gt; self.tile_sample_min_size \\ or tile.shape[-2] \u0026gt; self.tile_sample_min_size): tile = self.spatial_tiled_encode(tile, return_moments=True) else: tile = self.encoder(tile) tile = self.quant_conv(tile) if i \u0026gt; 0: tile = tile[:, :, 1:, :, :] row.append(tile) result_row = [] for i, tile in enumerate(row): if i \u0026gt; 0: # 线性组合当前帧与前一帧的重叠部分 tile = self.blend_t(row[i - 1], tile, blend_extent) result_row.append(tile[:, :, :t_limit, :, :]) else: # 第一帧正常返回 result_row.append(tile[:, :, :t_limit + 1, :, :]) moments = torch.cat(result_row, dim=2) posterior = DiagonalGaussianDistribution(moments) if not return_dict: return (posterior,) return AutoencoderKLOutput(latent_dist=posterior) Trm Block Trm 使用 unified Full Attention 机制，不再将 spatial 和 temporal 分开计算。（像 CogVideoX 一样） Trm 结构如下： Trm 部分的超参数如下： 输入处理 对于视频，使用 3DVAE 转换成 Latents 对于文本，首先使用 LLM（代码中使用的是Llama3）编码成 Embedding，捕获精细的语义信息，同时使用 CLIP 提取池化的文本表示，包含全局信息。 主要结构 主要结构采用了从 Dual-Stream DiT 到 Single-Stream DiT 的设计。（类似于 Flux） 代码中实际上用的就是 Flux.1 中的 Double 和 Single 网络 位置编码 将 RoPE 扩展到了三维，具体来说是先分别计算 T、H、W 三个维度的旋转频率矩阵，之后将 C 划分成三部分 (dt, dh, dw)，将每一段乘以对应的频率，并将结果 concat，得到最终的 RoPE 如何划分的呢？ Text Encoder 使用 MLLM 代替 CLIP/T5 作为文本编码器。 相比于 T5，MLLM 在特征空间有更好的图文对齐； 相比于 CLIP，MLLM 在图片细节理解和复杂推理上更强； MLLM可以遵循 prompt 去编码文本，将注意力更多地放在关键信息上。 MLLM 基于因果注意，而 T5-XXL 则利用双向注意，双向注意可以为扩散模型提供更好的文本指导，因此使用 Refineer 增强 MLLM 输出的文本特征。 CLIP 提供的全局信息同样非常重要。类似于Flux和SDv3，通过 scale/shift/gate 的方式将 CLIP 的全局信息添加到模型中。 Scaling Law 模型预训练 模型加速 模型性能评估 V2A 模型 I2V 模型 人像动画生成 ","permalink":"http://localhost:1313/papers/2233/","summary":"\u003ch1 id=\"paper\"\u003ePaper\u003c/h1\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHunyuanVideo 是一款开源的视频生成基座模型，打破了目前的开源模型远远弱于闭源模型的情形。\u003c/li\u003e\n\u003cli\u003eHunyuan 在论文中提出了多种模型，包括文生视频、视频生音频、图生视频，以及姿态控制、音频控制、表情控制等多种下游微调任务。\u003c/li\u003e\n\u003cli\u003e完整的 pipeline 如下所示：\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"/images/Pasted%20image%2020250307161744.png\" width=\"656\" height=\"250\"/\u003e \n\u003c/figure\u003e\n\u003c/li\u003e\n\u003cli\u003e在 Pipeline 中主要包含三个部分：数据处理、基座模型训练以及下游任务。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"detail\"\u003eDetail\u003c/h2\u003e\n\u003ch3 id=\"t2v-模型\"\u003e\u003ccode\u003eT2V\u003c/code\u003e 模型\u003c/h3\u003e\n\u003ch4 id=\"3d-vae\"\u003e\u003ccode\u003e3D VAE\u003c/code\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e与以往的视频生成模型不同，Hunyuan 选择自己从头训练一个 \u003ccode\u003e3D VAE\u003c/code\u003e 模型。从实验上来看，Hunyuan 的 \u003ccode\u003e3D VAE\u003c/code\u003e 有更高的 PSNR，也就是有更好的重构效果。\u003c/li\u003e\n\u003cli\u003e模型的 PSNR 实验效果如下：\n\u003cimg alt=\"image-2.png\" loading=\"lazy\" src=\"image-2.png\"\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e3DVAE\u003c/code\u003e 的模型结构如下：\n\u003cimg alt=\"image.png\" loading=\"lazy\" src=\"image.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"训练\"\u003e训练\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e训练数据采用 \u003ccode\u003e视频：图片=4:1\u003c/code\u003e 比例。\u003c/li\u003e\n\u003cli\u003e使用多种损失共同构成损失函数：L1损失+KL损失+LPIPS损失+GAN损失。全都是和图片重构相关的损失函数。\n\u003cimg alt=\"image-1.png\" loading=\"lazy\" src=\"image-1.png\"\u003e\u003c/li\u003e\n\u003cli\u003e训练策略上，采取了渐进式训练策略，从低分辨率短视频逐渐过渡到高分辨率长视频。\u003c/li\u003e\n\u003cli\u003e为了提升模型对于高速视频的重建能力，会从 \u003ccode\u003e[1,8]\u003c/code\u003e 中随机采样一个数字作为采样间隔，使用该采样间隔从视频帧中进行均匀采样，采样结果用于训练。\n\u003cul\u003e\n\u003cli\u003e这样的帧率应该就不一样了呀？ #🤔\u003c/li\u003e\n\u003cli\u003e通过 Mask 来实现输入帧率不变但实际帧率变化？\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"推理\"\u003e推理\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e高分辨率长视频的推理往往难以在单张GPU上完成，为了解决这个问题，论文提出了\u003cstrong\u003e时空瓦片策略\u003c/strong\u003e（spatial-temporal tiling strategy）（很形象的名字，视频首尾相连，类似于房顶的瓦片），将视频拆成有部分重叠的片段，对每个片段单独编解码，并使用线性组合处理重叠部分。\u003c/li\u003e\n\u003cli\u003e直接在推理中使用瓦片策略会导致训练和推理中出现不一致的情况（重叠部分的处理导致的），为了解决这个问题，论文在训练之后引入了一个微调阶段，\u003cstrong\u003e在微调阶段中随机决定是否采用瓦片策略\u003c/strong\u003e，保证训练和推理的一致性。\u003c/li\u003e\n\u003cli\u003e按照 T 维度（temporal）进行操作的代码如下：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etemporal_tiled_encode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etorch\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFloatTensor\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          \u003cspan class=\"n\"\u003ereturn_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003ebool\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eAutoencoderKLOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eH\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eW\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshape\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# 减去重叠部分后的长度，用作步长  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eoverlap_size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etile_sample_min_tsize\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etile_overlap_factor\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# 前后帧的重叠长度  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eblend_extent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etile_latent_min_tsize\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etile_overlap_factor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# 最大长度  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003et_limit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etile_latent_min_tsize\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eblend_extent\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# Split the video into tiles and encode them separately.  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003erow\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoverlap_size\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e# 每一个瓦片的长度为 tile_sample_min_tsize        tile = x[:, :, i: i + self.tile_sample_min_tsize + 1, :, :]  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e# 处理空间维度  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euse_spatial_tiling\u003c/span\u003e \\  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etile\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshape\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etile_sample_min_size\u003c/span\u003e \\  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     \u003cspan class=\"ow\"\u003eor\u003c/span\u003e \u003cspan class=\"n\"\u003etile\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshape\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etile_sample_min_size\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003etile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espatial_tiled_encode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereturn_moments\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003etile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eencoder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003etile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equant_conv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003etile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etile\u003c/span\u003e\u003cspan class=\"p\"\u003e[:,\u003c/span\u003e \u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"p\"\u003e:]\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eresult_row\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etile\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003eenumerate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e# 线性组合当前帧与前一帧的重叠部分  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003etile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblend_t\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003etile\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eblend_extent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eresult_row\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etile\u003c/span\u003e\u003cspan class=\"p\"\u003e[:,\u003c/span\u003e \u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003et_limit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"p\"\u003e:])\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e# 第一帧正常返回  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eresult_row\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etile\u003c/span\u003e\u003cspan class=\"p\"\u003e[:,\u003c/span\u003e \u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003et_limit\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"p\"\u003e:])\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003emoments\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etorch\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult_row\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edim\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eposterior\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDiagonalGaussianDistribution\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emoments\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003ereturn_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eposterior\u003c/span\u003e\u003cspan class=\"p\"\u003e,)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eAutoencoderKLOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elatent_dist\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eposterior\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"trm-block\"\u003eTrm Block\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTrm 使用 unified Full Attention 机制，不再将 spatial 和 temporal 分开计算。（像 CogVideoX 一样）\u003c/li\u003e\n\u003cli\u003eTrm 结构如下：\n\u003cimg alt=\"image-3.png\" loading=\"lazy\" src=\"image-3.png\"\u003e\u003c/li\u003e\n\u003cli\u003eTrm 部分的超参数如下：\n\u003cimg alt=\"image-4.png\" loading=\"lazy\" src=\"image-4.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"输入处理\"\u003e输入处理\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e对于视频，使用 \u003ccode\u003e3DVAE\u003c/code\u003e 转换成 Latents\u003c/li\u003e\n\u003cli\u003e对于文本，首先使用 LLM（代码中使用的是Llama3）编码成 Embedding，捕获\u003cstrong\u003e精细的语义信息\u003c/strong\u003e，同时使用 CLIP 提取池化的文本表示，包含\u003cstrong\u003e全局信息\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"主要结构\"\u003e主要结构\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e主要结构采用了从 Dual-Stream DiT 到 Single-Stream DiT 的设计。（类似于 Flux）\u003c/li\u003e\n\u003cli\u003e代码中实际上用的就是 \u003ccode\u003eFlux.1\u003c/code\u003e 中的 Double 和 Single 网络\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"位置编码\"\u003e位置编码\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e将 RoPE 扩展到了三维，具体来说是先分别计算 T、H、W 三个维度的旋转频率矩阵，之后将 C 划分成三部分 (dt, dh, dw)，将每一段乘以对应的频率，并将结果 concat，得到最终的 RoPE\n\u003cul\u003e\n\u003cli\u003e如何划分的呢？\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"text-encoder\"\u003eText Encoder\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e使用 MLLM 代替 CLIP/T5 作为文本编码器。\n\u003cul\u003e\n\u003cli\u003e相比于 T5，MLLM 在特征空间有更好的图文对齐；\u003c/li\u003e\n\u003cli\u003e相比于 CLIP，MLLM 在图片细节理解和复杂推理上更强；\u003c/li\u003e\n\u003cli\u003eMLLM可以遵循 prompt 去编码文本，将注意力更多地放在关键信息上。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eMLLM 基于因果注意，而 T5-XXL 则利用双向注意，\u003cstrong\u003e双向注意可以为扩散模型提供更好的文本指导\u003c/strong\u003e，因此使用 Refineer 增强 MLLM 输出的文本特征。\n\u003cimg alt=\"image-5.png\" loading=\"lazy\" src=\"image-5.png\"\u003e\u003c/li\u003e\n\u003cli\u003eCLIP 提供的全局信息同样非常重要。类似于Flux和SDv3，通过 scale/shift/gate 的方式将 CLIP 的全局信息添加到模型中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"scaling-law\"\u003eScaling Law\u003c/h4\u003e\n\u003ch4 id=\"模型预训练\"\u003e模型预训练\u003c/h4\u003e\n\u003ch4 id=\"模型加速\"\u003e模型加速\u003c/h4\u003e\n\u003ch4 id=\"模型性能评估\"\u003e模型性能评估\u003c/h4\u003e\n\u003ch3 id=\"v2a-模型\"\u003e\u003ccode\u003eV2A\u003c/code\u003e 模型\u003c/h3\u003e\n\u003ch3 id=\"i2v-模型\"\u003e\u003ccode\u003eI2V\u003c/code\u003e 模型\u003c/h3\u003e\n\u003ch3 id=\"人像动画生成\"\u003e人像动画生成\u003c/h3\u003e","title":"HunyuanVideo-- A Systematic Framework For Large Video Generative Models"}]